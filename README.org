* Third-Party Guix Channel
Unnamed Service will be maintaining a public third-party [[https://guix.gnu.org/][GNU Guix]] channel with package and service definitions. For issues, use the "Issues" function on GitHub.

** channels.scm
#+BEGIN_SRC scheme
(channel
  (name 'unnservice)
  (url "https://github.com/unnservice/guix-channel")
  (branch "main")
  (introduction
    (make-channel-introduction
      "71e639aea2828c466f77c1ff7fd0517ef17a4d08"
      (openpgp-fingerprint
        "4FBD 7445 5FDD 4E6E 75B1 D91B FAB8 710F BCD2 0E1C"))))
#+END_SRC
** Contents
*** Services
| Service                | Service type |
|------------------------+--------------|
| [[#dogecoin][dogecoind-service-type]] | system       |
| [[#guix-repl][guix-repl-service-type]] | system       |

*** Packages
See the notes as some packages require additional configuration.
| What?         | Version | Guix identifier/Notes |
|---------------+---------+-----------------------|
| Linux         |  5.17.7 | [[#linux][linux-managed]]         |
| Rust          |    1.60 | rust                  |
| Rust Sources  |    1.60 | [[#rust-src][rust-src]]              |
| Cargo         |    1.60 | rust-cargo            |
| Dogecoin-core |  1.14.5 | dogecoin-core         |
| Nerd Fonts    |   2.1.0 | font-nerd-fonts       |
| Flameshot     |  11.0.0 | flameshot-managed     |

** Configurations
*** Dogecoin
#+PROPERTY: CUSTOM_ID dogecoin
#+BEGIN_SRC scheme
(service dogecoind-service-type
  (dogecoind-configuration
    (user "dogecoin")
    (group "dogecoin")
    (datadir "/var/lib/dogecoind")
    ;; The location of the configuration file
    (conf "/etc/dogecoind.conf")
    ;; The content of the configuration file at location specified above
    (extra-content
      "any
      additional
      dogecoind.conf
      content")))
#+END_SRC
*** Guix-Repl
#+PROPERTY: CUSTOM_ID guix-repl
A Guix REPL service to start a Guix REPL in the background on boot. This is useful for Emacs Geiser.
#+BEGIN_SRC scheme
(service guix-repl-service-type
  (guix-repl-configuration
   (port "37146")
   (user "guix-repl")
   (group "guix-repl")))
#+END_SRC
*** Linux
#+PROPERTY: CUSTOM_ID linux
Linux kernel with a custom configuration picked up relative to the config that defines the (operating-system.)
#+BEGIN_SRC scheme
;; Your operating-system definition
(operating-system
  ...
  (kernel (linux-managed
           ;; The config to use, located relative to your system.scm
           (local-file "linux-managed.config")))
  ...)
#+END_SRC
*** Rust
**** rust-src
#+PROPERTY: CUSTOM_ID rust-src
Rust-src is not public in the default Guix channel. This channel enables one to also install rust-src.

When compiling rust-analyzer from source, it will require rust-src and will search for it in the RUST_SRC_PATH environment variable. For instance, if you install rust-src in your default user profile:

#+BEGIN_SRC bash
guix install rust-src
#+END_SRC

Then RUST_SRC_PATH should point to ~/.guix-profile/lib/rustlib/src/rust/library.
