* Third-Party Guix Channel
Unnamed Service will be maintaining a public third-party [[https://guix.gnu.org/][GNU Guix]] channel with package and service definitions. For issues, use the "Issues" function on GitHub.

** channels.scm
#+BEGIN_SRC scheme
(channel
  (name 'unnservice)
  (url "https://github.com/unnservice/guix-channel")
  (branch "main")
  (introduction
    (make-channel-introduction
      "71e639aea2828c466f77c1ff7fd0517ef17a4d08"
      (openpgp-fingerprint
        "4FBD 7445 5FDD 4E6E 75B1 D91B FAB8 710F BCD2 0E1C"))))
#+END_SRC
** Contents
*** Services
| Service                | Service type |               |
|------------------------+--------------+---------------|
| dogecoind-service-type | system       | [[*Dogecoin][Documentation]] |
| guix-repl-service-type | system       | [[*Guix-repl][Documentation]] |

*** Packages
| What?         | Version | Guix identifier   | Notes                                                                            |
|---------------+---------+-------------------+----------------------------------------------------------------------------------|
| Rust          |    1.60 | rust              |                                                                                  |
| Rust Sources  |    1.60 | rust-src          | Needed for setting RUST_SRC_PATH for rust-analyzer when you compile it from git. |
| Cargo         |    1.60 | rust-cargo        |                                                                                  |
| Dogecoin-core |  1.14.5 | dogecoin-core     |                                                                                  |
| Nerd Fonts    |   2.1.0 | font-nerd-fonts   |                                                                                  |
| Flameshot     |  11.0.0 | flameshot-managed |                                                                                  |

** Configurations
*** Dogecoin
#+BEGIN_SRC scheme
(service dogecoind-service-type
  (dogecoind-configuration
    (user "dogecoin")
    (group "dogecoin")
    (datadir "/var/lib/dogecoind")
    (conf "/etc/dogecoind.conf")
    (extra-content
      "any
      additional
      dogecoind.conf
      content")))
#+END_SRC
*** Guix-Repl
A Guix REPL service to start a Guix REPL on boot. This is useful for Emacs Geiser if you want it to connect to a Guix REPL automatically when Emacs starts.
#+BEGIN_SRC scheme
(service guix-repl-service-type
  (guix-repl-configuration
   (port "37146")
   (user "guix-repl")
   (group "guix-repl")))
#+END_SRC
